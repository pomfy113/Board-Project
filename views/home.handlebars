<style>
.grid {
    margin:1em auto;
    transform: rotateX(60deg) rotateY(0deg) rotateZ(-45deg);

}

.grid td {
    cursor:pointer;
    width:50px;
    height:50px;
    border:1px
    solid #ccc;
    text-align:center;
    font-family:sans-serif;
    font-size:13px
}

.grid td.clicked {
    background-color:yellow;
    font-weight:bold; color:red;
}

    /*CUUUUBE*/
.container {
  width: 200px;
  height: 200px;
  border: 1px solid #000;
  position: relative;
  perspective: 400px;
}

.cube {
  position: absolute;
  transform-style: preserve-3d;
}
.face {
  position: absolute;
  width: 100px;
  height: 100px;
}

.cube-1 {
   transform: translate3d(50px, 50px, 0) rotate3d(1, 1, 0, 33deg);
}

.face:nth-child(1) {
    transform: rotate3d(0, 0, 0, 0) translate3d(0, 0, -50px);
    background-color: rgba(255, 0, 0, 0.5);
  }

  /* top */
  .face:nth-child(2) {
    transform: rotate3d(1, 0, 0, 90deg) translate3d(0, 0, -50px);
    background-color: rgba(0, 255, 0, 0.5);
  }

  /* right */
  .face:nth-child(3) {
    transform: rotate3d(0, 1, 0, 90deg) translate3d(0, 0, -50px);
    background-color: rgba(0, 0, 255, 0.5);
  }

  /* front */
  .face:nth-child(4) {
    transform: rotate3d(0, 1, 0, 180deg) translate3d(0, 0, -50px);
    background-color: rgba(255, 0, 0, 0.5);
  }

  /* top */
  .face:nth-child(5) {
    transform: rotate3d(1, 0, 0, -90deg) translate3d(0, 0, -50px);
    background-color: rgba(0, 255, 0, 0.5);
  }

  /* right */
  .face:nth-child(6) {
    transform: rotate3d(0, 1, 0, -90deg) translate3d(0, 0, -50px);
    background-color: rgba(0, 0, 255, 0.5);
  }

</style>
<div class="container">
  <div id="cubetest" class="cube cube-1">
    <div class="face"></div>
    <div class="face"></div>
    <div class="face"></div>
    <div class="face"></div>
    <div class="face"></div>
    <div class="face"></div>
  </div>
</div>

<button id="generate">Generate Grid</button>
Rows: <input id="row"></input>
Columns: <input id="column"></input>
<div id="container">

</div>

<script>
// ==============
// ==== Grid ====
// ==============
let lastClicked;
let generate = document.getElementById("generate")
let grid;
const container = getElement("container")

generate.onmousedown = function(e){
    let rows = document.getElementById('row').value
    let cols = document.getElementById('column').value

    if (grid){
        grid.remove()
    }
    grid = clickableGrid(rows, cols, function(el,row,col,i){
        console.log("You clicked on element:",el);
        console.log("You clicked on row:",row);
        console.log("You clicked on col:",col);
        console.log("You clicked on item #:",i);

        el.className='clicked';
        if (lastClicked) lastClicked.className='';
        lastClicked = el;
    });

    container.appendChild(grid);

}

function clickableGrid(rows, cols, callback ){
    let i = 0;
    let grid = document.createElement('table');
    grid.className = 'grid';
    for (let r=0; r<rows; ++r){
        let tr = grid.appendChild(document.createElement('tr'));
        for (var c=0;c<cols;++c){
            var cell = tr.appendChild(document.createElement('td'));
            cell.innerHTML = ++i;
            cell.addEventListener('click',(function(el, r, c, i){
                return function(){
                    callback(el, r, c, i);
                }
            })(cell, r, c, i),false);
        }
    }
    return grid;
}
// ==============
// ==== Drag ====
// ==============
let cubetest = document.getElementById('cubetest')

cubetest.onmousedown = function(e) {
    console.log("Hello?")
  const tile = makeTile()
  const draggable = new Draggable(tile, e.pageX, e.pageY)
  selected = draggable
}

function makeTile() {
  // Create a new div element
  const el = document.createElement('div')
  el.classList.add('player')
  container.appendChild(el)
  return el
}

function getElement(id) {
  return document.getElementById(id)
}

</script>
