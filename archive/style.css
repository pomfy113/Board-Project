body{
    --genColor: #DEB887;
    --inputColor: #EDE1D1;
    --gridColor: #f6f0e8dd;
    margin: 0px;
}

body *{
    color: white;
    text-shadow: 0 0 3px black;
}

button{
    border-radius: 25px;
    align-self: center;
    background-color: var(--inputColor);
    border: 1px solid grey;

}

button.hidden{
    background-color: #2a241c;
}


#generators{
    grid-area: top;
    display: grid;
    overflow: hidden;     /* Need this for hiding */
    grid-template-columns: repeat(6, 1fr);
    grid-template-areas:    "gene cube cube cube cube cube";
    transition: 750ms;
    border-bottom: 1px solid black;
    background-color: var(--genColor);
    z-index: 999;
    position: relative;
}

/* ============================================== */
/* Contains all the grid generation items         */
/* ============================================== */
#generate-grid{
    grid-area: gene;
    display: inline-flex;
    flex-direction: column;
    padding: 5px;
    border-right: 1px solid black;
    /* Text*/

}

    #generate-grid input{
        width: 50%;
        background-color: var(--inputColor);
        border: 0px;
    }

    #generate-grid *:focus{
        outline: none;
    }

    #generate-grid div{
        display: flex;
        justify-content: space-between;
        margin: 2px;
    }

    #generate-grid button{
        margin: 10px;
        width: 75%;
        height: 15%;

    }
/* ============================================== */
/* Contains all the cube generator items          */
/* ============================================== */

#generate-tokens {
  grid-area: cube;
  display: inline-flex;
  flex-flow: row;
  flex-direction: row;
}

.face {
  position: absolute;
  width: 50px;
  height: 50px;
}

.generator{
    margin: 5px 50px;
    background-color: none;
    /*align-self: center;*/
}

td .token{
    position: absolute;
    transform-style: preserve-3d;
    transform: translateZ(25px) translateY(-25px);
}

  /* Bottom */
  .cube .face:nth-child(1) {
    transform: rotate3d(0, 0, 0, 0) translate3d(0, 0, -25px);
    background-color: rgba(255, 0, 0, 0.5);
  }

  .cube .face:nth-child(2) {
    transform: rotate3d(1, 0, 0, 90deg) translate3d(0, 0, -25px);
    background-color: rgba(0, 255, 0, 0.5);
  }

  .cube .face:nth-child(3) {
    transform: rotate3d(0, 1, 0, 90deg) translate3d(0, 0, -25px);
    background-color: rgba(0, 0, 255, 0.5);
  }

  /* Top */
 .cube .face:nth-child(4) {
    transform: rotate3d(0, 1, 0, 180deg) translate3d(0, 0, -25px);
    background-color: rgba(255, 0, 0, 0.5);
  }

  .cube .face:nth-child(5) {
    transform: rotate3d(1, 0, 0, -90deg) translate3d(0, 0, -25px);
    background-color: rgba(0, 255, 0, 0.5);
  }

  .cube .face:nth-child(6) {
    transform: rotate3d(0, 1, 0, -90deg) translate3d(0, 0, -25px);
    background-color: rgba(0, 0, 255, 0.5);
  }

    /* Base */
    /* I only want to show it on the container*/
    .grid .token>.face:nth-child(1) {
      transform: rotate3d(0, 0, 0, 0) translate3d(0, 0, -24px);
      background-color: rgba(255, 0, 0, 0.5);
      border-radius: 50%;
    }

    /* Backright */
    .token .face:nth-child(2) {
      transform: rotateX(-90deg) rotateY(var(--rotZ ));
      background-image: url('token.jpg');
      background-size: auto 100%;
      background-repeat: no-repeat;
      transition: 500ms;
    }


/* ======================= */

#container{
    position: relative;
    height: 100%;
    flex-direction: row;
    --zoom: 1;
    overflow: hidden;
    border: 1px solid black;
    margin: 0px;
    background-color: #e4d2ba;

}

.grid {
    /* These get set on creation, but defaults are: 70deg, 0deg, -45deg, X Y Z*/
    z-index: 1;
    position: absolute;
    transform-style: preserve-3d;
    border-collapse: collapse;
    background-color: var(--gridColor);
    transition: 500ms;
    left: calc(50% + var(--x));
    top: calc(50% + var(--y));
    transform:
        translateX(-50%)
        translateY(-25%)
        scale(var(--zoom))
        rotateX(var(--rotX))
        rotateY(var(--rotY))
        rotateZ(var(--rotZ))
        translateZ(var(--trnZ));
}

.grid td {
    cursor: pointer;
    width: 52px;
    height: 52px;
    border: 1px solid #ccc;
    padding: 0px;
    box-sizing: content-box;
}

.grid td.clicked {
    background-color: yellow;
    font-weight: bold;
    color: red;
}

/* Controls */
#controls{
    position: absolute;
    display: flex;
    justify-content: space-between;
    flex-direction: row;
    width: 100%;
}

#grid-visibility{
    display: flex;
    flex-direction: column;
}

.sidebar {
    display: flex;
    margin: 5px;
}

.control {
    z-index: 999;
    display: inherit;
    flex-direction: column;
    align-items: center;

}

    .control .row{
        display: inherit;
    }

    .ctrl-btn {
        --size: 30px;
        font-size: 6px;
        height: var(--size);
        width: var(--size);
        line-height: var(--size);
        border: 1px solid black;
        border-radius: 50%;
        text-align: center;
        /*margin: 0px 10px;*/
        background-color: var(--inputColor);
    }

    .row .ctrl-btn{
        margin: 0px 10px;
    }

    .row.nogap .ctrl-btn{
        margin: 0px 2px;
    }

/* Hints */
#hint{
    position: absolute;
    right: 2%;
    bottom: 2%;
}

#hint p{
    margin: 0px;
    color: white;
    text-shadow: 0 0 1px black;

}
